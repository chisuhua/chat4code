templates:
  coding_response:
    name: "编码响应模板"
    description: "编码任务的AI响应格式要求"
    template: |
      本附件以markdown格式列出项目文件内容，每个文件以“## 文件路径” 来标识
      **请按照以下要求执行任务**:
      请对上面所有代码进行{action}，并按以下规则返回结果：

      1. 保持原有的 `## 文件路径` 结构；
      2. 在每个原始代码块位置，替换成{action_desc}：
      ```markdown
      ## 文件路径1
      ```cpp
      // {result_desc}
      ```
      ```
      3. 可以在开头添加`# 总结`, 用于描述你执行的任务结果
      4. {additional_rules}
      5. 不要合并文件、不要省略代码、不要添加额外解释；
      6. 确保输出仍是有效的 Markdown；
      7. {file_selection_rule}

  analyzing_response:
    name: "分析响应模板"
    description: "分析任务的AI响应格式要求"
    template: |
      本附件以markdown格式列出项目文件内容，每个文件以“## 文件路径” 来标识
      **请按照以下要求执行任务**:
      请对上面所有代码进行{action}，并按以下规则返回结果：

      1. 可以自由组织文件结构，根据需要合并或拆分文件；
      2. 可以省略不重要的代码片段，只保留关键部分；
      3. 可以添加详细的分析和解释说明；
      4. {additional_rules}
      5. 可以添加额外的解释和说明文字；
      6. 确保输出仍是有效的 Markdown；
      7. {file_selection_rule}

  explaining_response:
    name: "解释响应模板"
    description: "代码解释任务的AI响应格式要求"
    template: |
      ## 待解释的功能描述
      [请在此处描述具体功能]

      请仔细分析本文档（附件）的完整内容。此文档不仅描述了任务，还以特定格式包含了项目的部分源文件代码。你的任务是解释代码是如何实现[待解释的功能描述](#待解释的功能描述)。

      ## 按以下规则返回结果：
      1. **角色**：你是一位AI编程导师，能为用户提供代码解释服务；
      2. **技能要求**：
         - 代码分析：理解代码功能，解析每行或每个代码块的作用；
         - 逻辑解释：将执行流程转换成易于理解的语言；
         - 语法规则：基于编程语言语法解释代码结构；
         - 注释解释：翻译和解释代码注释内容；
      3. **限制条件**：
         - 专注于代码解释，不提供代码编写或修改服务；
         - 解释基于已知编程知识，不涉及未经验证的假设；
         - 如果代码有错误，只解释可能目的，不提供修正方案；
         - 保持客观解释，不涉及个人观点；
      4. {additional_rules}
      5. 可以添加详细的解释和说明文字；
      6. {file_selection_rule}

  file_operations:
    name: "文件操作模板"
    description: "支持文件增删改操作的响应格式"
    template: |
      **请按照以下要求执行任务**:
      本附件以markdown格式列出项目文件内容，每个文件以“## 文件路径” 来标识
      请对上面所有代码进行{action}，并按以下规则返回结果：

      1. **文件修改**：在原有 `## 文件路径` 位置替换为修改后的代码；
      2. **文件删除**：使用以下格式标记删除的文件：
      ```markdown
      ## 文件路径1
      ```deleted
      // 此文件已被删除，原因：[删除原因]
      ```
      ```
      3. **文件新增**：添加新的 `## 文件路径` 条目；
      4. **文件重命名**：先标记原文件删除，再添加新文件；
      5. {additional_rules}
      6. 不要添加额外解释，只返回必要的文件变更；
      7. 确保输出仍是有效的 Markdown；

generic:
  analyze:
    name: "代码分析"
    description: "分析项目结构和功能"
    prompt: |
      请分析这个项目的整体结构、主要功能模块和技术栈。
      
      {analyzing_response:
        action=分析,
        action_desc=分析结果,
        result_desc=分析结果内容,
        additional_rules=可以添加总体分析报告，在文件前提供项目概述；,
        file_selection_rule=可以选择性返回需要重点分析的文件。
      }

  explain:
    name: "代码解释"
    description: "详细解释代码功能和逻辑"
    prompt: |
      
      {explaining_response:
        action=解释,
        action_desc=代码解释结果,
        result_desc=代码功能解释,
        additional_rules=逐行解释关键代码逻辑；说明变量作用和数据流向；解释算法原理；,
        file_selection_rule=可以选择性返回需要重点解释的文件。
      }

  summarize:
    name: "代码摘要"
    description: "生成项目代码摘要和关键点总结"
    prompt: |
      请为这个项目生成详细的代码摘要，包括核心功能、关键技术点、架构设计等。
      
      {analyzing_response:
        action=摘要,
        action_desc=代码摘要结果,
        result_desc=项目摘要内容,
        additional_rules=重点突出项目的核心功能、技术亮点和设计模式；可以添加总体架构图描述；,
        file_selection_rule=可以选择性返回代表性文件。
      }

  optimize:
    name: "性能优化"
    description: "优化代码性能"
    prompt: |
      请分析代码的性能瓶颈，并提供优化建议。
      
      {coding_response:
        action=优化,
        action_desc=优化后的新代码块,
        result_desc=优化后的代码内容,
        additional_rules=每个文件后可附加「### 优化说明」，列出改进点；,
        file_selection_rule=只返回需要修改的文件。
      }

  bugfix:
    name: "Bug修复"
    description: "修复代码中的错误"
    prompt: |
      请检查代码中可能存在的bug，并提供修复方案。特别注意：内存泄漏、空指针、数组越界等问题。
      
      {coding_response:
        action=Bug修复,
        action_desc=修复后的代码,
        result_desc=修复后的代码内容,
        additional_rules=每个文件后可附加「### 修复说明」，列出修复的Bug；,
        file_selection_rule=只返回需要修改或有问题的文件。
      }

  document:
    name: "添加注释文档"
    description: "为代码添加注释和文档"
    prompt: |
      请为代码添加详细的注释和函数文档，包括参数说明、返回值说明和功能描述。
      
      {coding_response:
        action=添加注释文档,
        action_desc=添加注释后的代码,
        result_desc=添加注释后的代码内容,
        additional_rules=每个文件后可附加「### 文档说明」，列出添加的注释点；,
        file_selection_rule=只返回需要添加注释的文件。
      }

  test:
    name: "添加测试"
    description: "为代码添加单元测试"
    prompt: |
      请为这个项目添加单元测试，覆盖主要功能逻辑。使用适当的测试框架。
      
      {coding_response:
        action=添加测试,
        action_desc=测试代码,
        result_desc=测试代码内容,
        additional_rules=可以添加新文件来实现测试；每个测试文件后可附加「### 测试说明」，列出测试覆盖点；,
        file_selection_rule=可以添加新文件。
      }

  refactor:
    name: "代码重构"
    description: "改善代码结构和可读性"
    prompt: |
      本附件以markdown格式列出项目文件内容，每个文件以“## 文件路径” 来标识
      请重构代码以提高可读性和可维护性。包括：函数拆分、命名优化、消除重复代码、文件重组等。
      
      **请按照以下要求执行任务**:
      请对上面所有代码进行重构，并按以下规则返回结果：

      1. **文件修改**：在原有 `## 文件路径` 位置替换为重构后的代码；
      2. **文件删除**：使用以下格式标记删除的文件：
      ```markdown
      ## src/old_file.cpp
      ```deleted
      // 此文件已被删除，原因：[删除原因]
      ```
      ```
      3. **文件新增**：添加新的 `## 文件路径` 条目；
      4. **文件重命名**：先标记原文件删除，再添加新文件；
      5. **目录重组**：可以调整文件目录结构；
      6. 每个文件后可附加「### 重构说明」，列出具体的重构操作；
      7. 不要添加额外解释，只返回必要的文件变更；
      8. 确保输出仍是有效的 Markdown；
      9. 只返回需要修改、删除或新增的文件。

      重构重点：
      - 消除代码重复
      - 改善函数职责单一性
      - 优化类和模块设计
      - 改进命名规范
      - 优化目录结构

  project:
    name: "项目信息"
    description: "提取项目信息"
    prompt: |
      本文档是一个特殊的markdown文件，文档后面包含了项目源代码文件，这些文件以 `## <文件路径>` 作为章节标题，文件内容包含在该章节下的代码块中。

      **请按照以下要求执行任务**:
      1. **理解项目源文件**：对项目的每个源文件理解实现的功能。
      2. **记住源代码内容**：后续AI对话会基于源代码文件的完整内容。
      3. **给出你对每个文件内容的理解**。

  add_feature:
    name: "添加功能"
    description: "添加新功能特性"
    prompt: |
      核心任务要求:
      请仔细分析并修改本文档中包含的源代码文件。您的具体任务是：[请在此处描述具体功能]


      操作指引:
      1.  **理解文档结构**: 本文档是一个特殊的 Markdown 文件。它本身的内容就是你需要操作的对象。文档的后半部分包含了项目文件的代码，每个文件的内容以代码块的形式位于一个以其文件路径命名的章节下（格式为 `## <文件路径>`）。
      2.  **分析文档结构**：本文档的后半部分包含了项目源代码文件。这些文件以 `## <文件路径>` 作为章节标题，文件内容包含在该章节下的代码块中。
      3.  **定位相关文件**：浏览文档，找出所有 `## <文件路径>` 章节。分析这些文件的功能，确定哪个（或哪些）文件与上述“核心任务要求”相关。
      4.  **修改代码逻辑**：
          *   在上一步确定的目标文件中，找到与任务要求相关的函数、类或代码段。
          *   根据“核心任务要求”进行代码的增加、修改或删除。
          *   注意保持代码风格一致，并添加必要的注释或错误处理（如果适用）。
      5.  **返回修改结果**：严格按照下方“返回结果要求”章节的格式，返回修改后的完整文件代码。

      返回结果要求
      1.  **返回任务ID**: 第一行返回: `[关联特性ID]`
      2.  **任务概括**: 首先，用一句话输出你要执行的任务。
      3.  **实现思路**: 然后，简要输出你的实现过程。
      4.  **格式组织**: 添加`## 返回文件一览` 章节，列出要修改或新增文件的目录结构, 然后按二级标题`## <文件路径>`格式的要求返回每个文件的完整内容。
      5.  **返回文件规则**:
          *   按照本文档原始 `## <文件路径>` 的结构，强制使用二级标题`## <文件路径>` (`<文件路径>`不要加反引号)格式章节，章节内代码块替换成修改后的文件完整内容。
          *   **文件修改规则**：将修改后的目标文件的完整内容，替换其原始的 `## <文件路径>` 章节下的代码块，章节标题 `## <文件路径>` 保持完全不变。
          *   **文件新增规则**：只在无法通过修改文件来添加新功能时才考虑新增所需的文件。
          *   **其他文件**：请勿返回或修改任何其他未涉及的 `## <文件路径>` 章节。
      6.  **文件完整性**: 返回的修改后文件必须是该文件的完整代码，不要省略任何部分。
      7.  **功能说明 (可选)**: 在修改后的代码块后面，可以附加「### 功能说明」小节，简要列出本次变更。

      功能实现约束
      *   **最小化变更**: 此任务为局部修改，请勿改动文件中与本次任务无关的代码。
      *   **遵循架构**: 修改应遵循目标文件现有的代码风格和结构。
      *   **正确性**: 添加必要的错误处理，如有必要，请添加基本的测试用例。

      请分析本文档后面的内容，并按上述提示进行操作和返回。

  security:
    name: "安全检查"
    description: "检查代码安全问题"
    prompt: |
      请检查代码中的安全漏洞，包括：输入验证、SQL注入、XSS攻击、权限控制等。
      
      {coding_response:
        action=安全检查和修复,
        action_desc=修复安全问题后的代码,
        result_desc=修复安全问题后的代码内容,
        additional_rules=每个文件后可附加「### 安全说明」，列出修复的安全问题；,
        file_selection_rule=只返回需要修复的文件。
      }

  port:
    name: "代码移植"
    description: "移植到其他平台或语言"
    prompt: |
      请将这个项目移植到[目标平台/语言]，保持原有功能不变。
      
      **请按照以下要求执行任务**:
      请对上面所有代码进行移植，并按以下规则返回结果：

      1. **文件转换**：将原有文件转换为目标语言；
      2. **文件删除**：使用以下格式标记不再需要的文件：
      ```markdown
      ## src/old_file.cpp
      ```deleted
      // 此文件在移植中被删除，原因：[删除原因]
      ```
      ```
      3. **文件新增**：添加移植后的新文件；
      4. **依赖调整**：更新第三方库和框架引用；
      5. **构建配置**：更新构建和配置文件；
      6. 每个文件后可附加「### 移植说明」，列出移植要点；
      7. 不要添加额外解释，只返回必要的文件变更；
      8. 确保输出仍是有效的 Markdown；
      9. 返回所有移植后的文件，包括新增、修改和删除的文件。

      移植要求：
      - 保持原有功能完整
      - 遵循目标平台的最佳实践
      - 更新API调用方式
      - 调整数据类型和语法结构

  review:
    name: "代码审查"
    description: "进行全面代码审查"
    prompt: |
      请作为资深开发人员对这个代码进行审查，指出问题并提供改进建议。
      
      {coding_response:
        action=审查,
        action_desc=审查后的代码（如有修改）,
        result_desc=审查后的代码内容,
        additional_rules=每个文件后可附加「### 审查说明」，列出发现的问题和建议；,
        file_selection_rule=只返回需要修改的文件。
      }

autonomous:
  autonomous_development:
    name: "自主开发"
    description: "自主执行开发任务"
    prompt: |
      作为AI开发助手，请自主分析和执行以下开发任务：
      
      1. **环境分析**
         - 检查项目结构和技术栈
         - 识别依赖关系和构建系统
         - 分析现有代码质量
      
      2. **任务规划**
         - 将复杂任务分解为小步骤
         - 确定执行优先级
         - 预测可能的风险和解决方案
      
      3. **执行策略**
         - 优先进行无破坏性操作
         - 每步操作后验证结果
         - 遇到问题时主动寻求帮助
      
      4. **质量保证**
         - 确保代码符合项目规范
         - 添加必要的测试
         - 提供清晰的文档说明

      **请按照以下要求执行任务**:
      请对上面所有代码进行自主开发，并按以下规则返回结果：

      1. **文件修改**：在原有 `## 文件路径` 位置替换为开发后的代码；
      2. **文件删除**：使用以下格式标记删除的文件：
      ```markdown
      ## src/obsolete_file.cpp
      ```deleted
      // 此文件已被删除，原因：[删除原因]
      ```
      ```
      3. **文件新增**：添加新开发的文件；
      4. **文件重命名**：先标记原文件删除，再添加新文件；
      5. **目录调整**：可以重新组织目录结构；
      6. 每个文件后可附加「### 开发说明」，列出实现要点；
      7. 不要添加额外解释，只返回必要的文件变更；
      8. 确保输出仍是有效的 Markdown；
      9. 返回所有涉及的文件，包括修改、删除和新增的文件。

      开发原则：
      - 保持向后兼容性
      - 遵循最佳实践
      - 添加充分的测试
      - 提供清晰的文档

  systematic_debugging:
    name: "系统调试"
    description: "系统性的问题分析和解决"
    prompt: |
      请使用系统性方法进行调试和问题解决：
      
      1. **问题理解**
         - 明确问题现象和影响范围
         - 收集相关错误信息和日志
         - 复现问题的步骤
      
      2. **根因分析**
         - 使用二分法定位问题范围
         - 分析数据流向和控制流
         - 检查边界条件和异常情况
      
      3. **解决方案设计**
         - 提供多种解决思路
         - 评估每种方案的优缺点
         - 选择最适合的解决方案
      
      4. **验证和测试**
         - 设计测试用例验证修复
         - 考虑回归测试
         - 提供预防措施

      **请按照以下要求执行任务**:
      请对上面所有代码进行系统调试，并按以下规则返回结果：

      1. 保持原有的 `## 文件路径` 结构；
      2. 在每个原始代码块位置，替换成修复后的代码：
      ```markdown
      ## 文件路径1
      ```cpp
      // 调试修复后的代码内容
      ```
      ```
      3. 每个文件后可附加「### 调试说明」，列出问题和解决方案；
      4. 不要合并文件、不要省略代码、不要添加额外解释；
      5. 确保输出仍是有效的 Markdown；
      6. 保留项目头部信息（项目名称、导出时间等）；
      7. 只返回需要修改的文件。

cpp:
  analyze:
    name: "C++代码分析"
    description: "分析C++项目结构和功能"
    prompt: |
      请分析这个C++项目的整体结构、主要功能模块、使用的C++标准版本、第三方库依赖等。特别关注：内存管理方式、设计模式应用、编译构建系统等。
      
      {analyzing_response:
        action=分析,
        action_desc=C++分析结果,
        result_desc=C++分析结果内容,
        additional_rules=可以添加总体C++架构分析，在文件前提供C++特有关注点；,
        file_selection_rule=可以选择性返回需要重点分析的C++文件。
      }

  explain:
    name: "C++代码解释"
    description: "详细解释C++代码功能和逻辑"
    prompt: |
      请详细解释这段C++代码的功能和执行逻辑，帮助用户理解每行代码的作用。
      
      {explaining_response:
        action=解释,
        action_desc=C++代码解释结果,
        result_desc=C++代码功能解释,
        additional_rules=逐行解释C++语法特性；说明智能指针使用；解释模板和STL应用；,
        file_selection_rule=可以选择性返回需要重点解释的C++文件。
      }

  summarize:
    name: "C++代码摘要"
    description: "生成C++项目代码摘要"
    prompt: |
      请为这个C++项目生成详细的代码摘要，包括核心功能、关键技术点、架构设计等。
      
      {analyzing_response:
        action=摘要,
        action_desc=C++代码摘要结果,
        result_desc=C++项目摘要内容,
        additional_rules=重点突出C++的核心功能、内存管理、模板使用、STL应用等；可以添加C++架构图描述；,
        file_selection_rule=可以选择性返回代表性的C++文件。
      }

python:
  analyze:
    name: "Python代码分析"
    description: "分析Python项目结构和功能"
    prompt: |
      请分析这个Python项目的整体结构、主要功能模块、使用的Python版本、第三方库依赖、包管理方式等。特别关注：模块组织、虚拟环境使用、测试框架等。
      
      {analyzing_response:
        action=分析,
        action_desc=Python分析结果,
        result_desc=Python分析结果内容,
        additional_rules=可以添加总体Python架构分析，在文件前提供Python特有关注点；,
        file_selection_rule=可以选择性返回需要重点分析的Python文件。
      }

  explain:
    name: "Python代码解释"
    description: "详细解释Python代码功能和逻辑"
    prompt: |
      请详细解释这段Python代码的功能和执行逻辑，帮助用户理解每行代码的作用。
      
      {explaining_response:
        action=解释,
        action_desc=Python代码解释结果,
        result_desc=Python代码功能解释,
        additional_rules=逐行解释Python语法特性；说明装饰器使用；解释异步处理；,
        file_selection_rule=可以选择性返回需要重点解释的Python文件。
      }

  summarize:
    name: "Python代码摘要"
    description: "生成Python项目代码摘要"
    prompt: |
      请为这个Python项目生成详细的代码摘要，包括核心功能、关键技术点、架构设计等。
      
      {analyzing_response:
        action=摘要,
        action_desc=Python代码摘要结果,
        result_desc=Python项目摘要内容,
        additional_rules=重点突出Python的核心功能、装饰器使用、异步处理、包管理等；可以添加Python架构图描述；,
        file_selection_rule=可以选择性返回代表性的Python文件。
      }

javascript:
  analyze:
    name: "JavaScript代码分析"
    description: "分析JavaScript/TypeScript项目结构和功能"
    prompt: |
      请分析这个JavaScript/TypeScript项目的整体结构、主要功能模块、使用的框架、包管理方式、构建工具等。特别关注：模块系统、异步处理、状态管理等。
      
      {analyzing_response:
        action=分析,
        action_desc=JavaScript分析结果,
        result_desc=JavaScript分析结果内容,
        additional_rules=可以添加总体JavaScript架构分析，在文件前提供JavaScript特有关注点；,
        file_selection_rule=可以选择性返回需要重点分析的JavaScript文件。
      }

  explain:
    name: "JavaScript代码解释"
    description: "详细解释JavaScript代码功能和逻辑"
    prompt: |
      请详细解释这段JavaScript代码的功能和执行逻辑，帮助用户理解每行代码的作用。
      
      {explaining_response:
        action=解释,
        action_desc=JavaScript代码解释结果,
        result_desc=JavaScript代码功能解释,
        additional_rules=逐行解释JavaScript语法特性；说明异步处理；解释模块系统；,
        file_selection_rule=可以选择性返回需要重点解释的JavaScript文件。
      }

  summarize:
    name: "JavaScript代码摘要"
    description: "生成JavaScript项目代码摘要"
    prompt: |
      请为这个JavaScript项目生成详细的代码摘要，包括核心功能、关键技术点、架构设计等。
      
      {analyzing_response:
        action=摘要,
        action_desc=JavaScript代码摘要结果,
        result_desc=JavaScript项目摘要内容,
        additional_rules=重点突出JavaScript的核心功能、模块系统、异步处理、框架使用等；可以添加JavaScript架构图描述；,
        file_selection_rule=可以选择性返回代表性的JavaScript文件。
      }
