# 提示词模板定义
templates:
  standard_response:
    name: "标准响应模板"
    description: "标准的AI响应格式要求"
    template: |
      **请按照以下要求执行任务**:
      请对上面所有代码进行{action}，并按以下规则返回结果：

      1. 保持原有的 `## 文件路径` 结构；
      2. 在每个原始代码块位置，替换成{action_desc}：
      ```markdown
      ## 文件路径1
      ```cpp
      // {result_desc}
      ```
      ```
      3. {additional_rules}
      4. 不要合并文件、不要省略代码、不要添加额外解释；
      5. 确保输出仍是有效的 Markdown；
      6. {file_selection_rule}

# 具体任务定义
generic:
  analyze:
    name: "代码分析"
    description: "分析项目结构和功能"
    prompt: |
      请分析这个项目的整体结构、主要功能模块和技术栈。
      
      {{standard_response:
        action=分析,
        action_desc=分析结果,
        result_desc=分析结果内容,
        additional_rules=每个文件后可附加「### 分析说明」，列出关键点；,
        file_selection_rule=只返回需要分析的文件。
      }}

  optimize:
    name: "性能优化"
    description: "优化代码性能"
    prompt: |
      请分析代码的性能瓶颈，并提供优化建议。
      
      {{standard_response:
        action=优化,
        action_desc=优化后的新代码块,
        result_desc=优化后的代码内容,
        additional_rules=每个文件后可附加「### 优化说明」，列出改进点；,
        file_selection_rule=只返回需要修改的文件。
      }}

  bugfix:
    name: "Bug修复"
    description: "修复代码中的错误"
    prompt: |
      请检查代码中可能存在的bug，并提供修复方案。特别注意：内存泄漏、空指针、数组越界等问题。
      
      {{standard_response:
        action=Bug修复,
        action_desc=修复后的代码,
        result_desc=修复后的代码内容,
        additional_rules=每个文件后可附加「### 修复说明」，列出修复的Bug；,
        file_selection_rule=只返回需要修改或有问题的文件。
      }}

  document:
    name: "添加注释文档"
    description: "为代码添加注释和文档"
    prompt: |
      请为代码添加详细的注释和函数文档，包括参数说明、返回值说明和功能描述。
      
      {{standard_response:
        action=添加注释文档,
        action_desc=添加注释后的代码,
        result_desc=添加注释后的代码内容,
        additional_rules=每个文件后可附加「### 文档说明」，列出添加的注释点；,
        file_selection_rule=只返回需要添加注释的文件。
      }}

  test:
    name: "添加测试"
    description: "为代码添加单元测试"
    prompt: |
      请为这个项目添加单元测试，覆盖主要功能逻辑。使用适当的测试框架。
      
      {{standard_response:
        action=添加测试,
        action_desc=测试代码,
        result_desc=测试代码内容,
        additional_rules=可以添加新文件来实现测试；每个测试文件后可附加「### 测试说明」，列出测试覆盖点；,
        file_selection_rule=可以添加新文件。
      }}

  refactor:
    name: "代码重构"
    description: "改善代码结构和可读性"
    prompt: |
      请重构代码以提高可读性和可维护性。包括：函数拆分、命名优化、消除重复代码等。
      
      {{standard_response:
        action=重构,
        action_desc=重构后的代码,
        result_desc=重构后的代码内容,
        additional_rules=每个文件后可附加「### 重构说明」，列出改进点；,
        file_selection_rule=只返回需要重构的文件。
      }}

  add_feature:
    name: "添加功能"
    description: "添加新功能特性"
    prompt: |
      请添加以下功能：[请在此处描述具体功能需求]
      
      {{standard_response:
        action=添加功能,
        action_desc=添加功能后的代码,
        result_desc=添加功能后的代码内容,
        additional_rules=可以添加新文件来实现功能；每个文件后可附加「### 功能说明」，列出新增功能；,
        file_selection_rule=可以添加新文件。
      }}

  security:
    name: "安全检查"
    description: "检查代码安全问题"
    prompt: |
      请检查代码中的安全漏洞，包括：输入验证、SQL注入、XSS攻击、权限控制等。
      
      {{standard_response:
        action=安全检查和修复,
        action_desc=修复安全问题后的代码,
        result_desc=修复安全问题后的代码内容,
        additional_rules=每个文件后可附加「### 安全说明」，列出修复的安全问题；,
        file_selection_rule=只返回需要修复的文件。
      }}

  port:
    name: "代码移植"
    description: "移植到其他平台或语言"
    prompt: |
      请将这个项目移植到[目标平台/语言]，保持原有功能不变。
      
      {{standard_response:
        action=移植,
        action_desc=移植后的代码,
        result_desc=移植后的代码内容,
        additional_rules=可以调整文件扩展名以适应目标语言；每个文件后可附加「### 移植说明」，列出移植要点；,
        file_selection_rule=可以添加新文件。
      }}

  review:
    name: "代码审查"
    description: "进行全面代码审查"
    prompt: |
      请作为资深开发人员对这个代码进行审查，指出问题并提供改进建议。
      
      {{standard_response:
        action=审查,
        action_desc=审查后的代码（如有修改）,
        result_desc=审查后的代码内容,
        additional_rules=每个文件后可附加「### 审查说明」，列出发现的问题和建议；,
        file_selection_rule=只返回需要修改的文件。
      }}

autonomous:
  autonomous_development:
    name: "自主开发"
    description: "自主执行开发任务"
    prompt: |
      作为AI开发助手，请自主分析和执行以下开发任务：
      
      1. **环境分析**
         - 检查项目结构和技术栈
         - 识别依赖关系和构建系统
         - 分析现有代码质量
      
      2. **任务规划**
         - 将复杂任务分解为小步骤
         - 确定执行优先级
         - 预测可能的风险和解决方案
      
      3. **执行策略**
         - 优先进行无破坏性操作
         - 每步操作后验证结果
         - 遇到问题时主动寻求帮助
      
      4. **质量保证**
         - 确保代码符合项目规范
         - 添加必要的测试
         - 提供清晰的文档说明

      **请按照以下要求执行任务**:
      请对上面所有代码进行自主开发，并按以下规则返回结果：

      1. 保持原有的 `## 文件路径` 结构；
      2. 在每个原始代码块位置，替换成处理后的代码：
      ```markdown
      ## 文件路径1
      ```cpp
      // 自主开发后的代码内容
      ```
      ```
      3. 可以添加新文件来实现功能；
      4. 每个文件后可附加「### 开发说明」，列出实现要点；
      5. 不要合并文件、不要省略代码、不要添加额外解释；
      6. 确保输出仍是有效的 Markdown；
      7. 保留项目头部信息（项目名称、导出时间等）；
      8. 只返回需要修改或新增的文件。

  systematic_debugging:
    name: "系统调试"
    description: "系统性的问题分析和解决"
    prompt: |
      请使用系统性方法进行调试和问题解决：
      
      1. **问题理解**
         - 明确问题现象和影响范围
         - 收集相关错误信息和日志
         - 复现问题的步骤
      
      2. **根因分析**
         - 使用二分法定位问题范围
         - 分析数据流向和控制流
         - 检查边界条件和异常情况
      
      3. **解决方案设计**
         - 提供多种解决思路
         - 评估每种方案的优缺点
         - 选择最适合的解决方案
      
      4. **验证和测试**
         - 设计测试用例验证修复
         - 考虑回归测试
         - 提供预防措施

      **请按照以下要求执行任务**:
      请对上面所有代码进行系统调试，并按以下规则返回结果：

      1. 保持原有的 `## 文件路径` 结构；
      2. 在每个原始代码块位置，替换成修复后的代码：
      ```markdown
      ## 文件路径1
      ```cpp
      // 调试修复后的代码内容
      ```
      ```
      3. 每个文件后可附加「### 调试说明」，列出问题和解决方案；
      4. 不要合并文件、不要省略代码、不要添加额外解释；
      5. 确保输出仍是有效的 Markdown；
      6. 保留项目头部信息（项目名称、导出时间等）；
      7. 只返回需要修改的文件。

# 语言特定任务
cpp:
  analyze:
    name: "C++代码分析"
    description: "分析C++项目结构和功能"
    prompt: |
      请分析这个C++项目的整体结构、主要功能模块、使用的C++标准版本、第三方库依赖等。特别关注：内存管理方式、设计模式应用、编译构建系统等。
      
      {{standard_response:
        action=分析,
        action_desc=C++分析结果,
        result_desc=C++分析结果内容,
        additional_rules=每个文件后可附加「### 分析说明」，列出C++特有关注点；,
        file_selection_rule=只返回需要分析的文件。
      }}

python:
  analyze:
    name: "Python代码分析"
    description: "分析Python项目结构和功能"
    prompt: |
      请分析这个Python项目的整体结构、主要功能模块、使用的Python版本、第三方库依赖、包管理方式等。特别关注：模块组织、虚拟环境使用、测试框架等。
      
      {{standard_response:
        action=分析,
        action_desc=Python分析结果,
        result_desc=Python分析结果内容,
        additional_rules=每个文件后可附加「### 分析说明」，列出Python特有关注点；,
        file_selection_rule=只返回需要分析的文件。
      }}

javascript:
  analyze:
    name: "JavaScript代码分析"
    description: "分析JavaScript/TypeScript项目结构和功能"
    prompt: |
      请分析这个JavaScript/TypeScript项目的整体结构、主要功能模块、使用的框架、包管理方式、构建工具等。特别关注：模块系统、异步处理、状态管理等。
      
      {{standard_response:
        action=分析,
        action_desc=JavaScript分析结果,
        result_desc=JavaScript分析结果内容,
        additional_rules=每个文件后可附加「### 分析说明」，列出JavaScript特有关注点；,
        file_selection_rule=只返回需要分析的文件。
      }}
